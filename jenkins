#!/bin/bash

# Note: when the string "build" is passed in as the first argument to the
# jenkins script, run the full suite of jenkins tasks. Otherwise, only run
# jenkins tasks that would be needed to pass a build.

# Don't run me as root!
if [[ `id --user` == "0" ]]; then
    echo "Do not run jenkins as root."
    exit 1
fi

# Use virtualenv with Django-1.6 installed.
source /home/tbp/virtualenv/django16/bin/activate

# Go to directory of the script
pushd $(dirname $0) > /dev/null

# Clean up compiled python files
find . -type f -name "*.py[co]" -delete

# Remove old build reports:
rm -rf reports/*

# First ensure we have up-to-date submodules, as some may be required for tests:
git submodule init
git submodule update

# The following conditions must be true for jenkins to return true:
#   1. The tests must pass.
#   2. pylint must be perfect, as evidenced by no lines with ".py" in the
#      report.
#   3. pep8 must be perfect, as evidenced by no lines with ".py" in the report.
#   4. jshint must be perfect, as evidenced by no lines with "file" in the xml
#      output
#   5. scss-lint must be perfect, as evidenced by no lines with "file" in the
#      xml output
# All other lint errors are not taken into consideration for the +/- Verified
# flag. Jenkins will report the other lint errors in pretty graphs though.

# For full builds, pass in the "build" argument, which ensures that all desired
# jenkins tasks are run
if [[ $1 == 'build' ]]; then
    test_settings=quark.settings.test
else
    test_settings=quark.settings.test.local
fi
python manage.py jenkins --settings=$test_settings

# Run scss-lint and save it in an XML report:
scss-lint quark/static/css/*.scss --config .scss-lint.yml --format XML \
    > reports/csslint.report

# Error code should be 0 (no errors)
jenkins_status=$?

# Check if pylint is perfect (error code should not be 0: grep shouldn't find
# any lines with .py)
grep -q "\.py" reports/pylint.report
pylint_status=$?

# Check if pep8 is perfect (error code should not be 0: grep shouldn't find any
# lines with .py)
grep -q "\.py" reports/pep8.report
pep8_status=$?

# Check if jshint is perfect (error code should not be 0: grep shouldn't find
# any lines with file)
grep -q "file" reports/jshint.xml
jshint_status=$?

# Check if css linting is perfect (error code should not be 0; grep shouldn't
# find any lines with file)
grep -q "file" reports/csslint.report
csslint_status=$?

success=$(($jenkins_status != 0 || $pylint_status == 0 || $pep8_status == 0 || $jshint_status == 0 || $csslint_status == 0))

if [[ $success == 0 ]]; then
    echo -e "\nEverything looks good!"
else
    if [[ $pylint_status == 0 ]]; then
        echo -e "\nPYLINT VIOLATIONS"
        echo "================================================================"
        # Print until first blank line (the lines that say the errors)
        awk '/^\s*$/{exit}1' reports/pylint.report
    else
        echo -e "\nNo pylint violations."
    fi

    if [[ $pep8_status == 0 ]]; then
        echo -e "\nPEP8 VIOLATIONS"
        echo "================================================================"
        # Print the whole file (all lines say the errors)
        cat reports/pep8.report
    else
        echo -e "\nNo pep8 violations."
    fi

    if [[ $jshint_status == 0 ]]; then
        echo -e "\nJSHINT VIOLATIONS"
        echo "================================================================"
        # Parse which files had errors, and run jshint on them to get a nice
        # print-out of the errors. (The XML representation of the report is not
        # very human-friendly.)
        grep -Po '<file name="\K(.*?)(?=">)' reports/jshint.xml | xargs jshint
    else
        echo -e "\nNo jshint violations."
    fi

    if [[ $csslint_status == 0 ]]; then
        echo -e "\nSCSS-LINT VIOLATIONS"
        echo "================================================================"
        # Parse which files had errors, and run scss-lint on them to get a nice
        # print-out of the errors. (The XML representation of the report is not
        # very human-friendly.)
        grep -Po "<file name='\K(.*?)(?='>)" reports/csslint.report \
            | xargs scss-lint -c .scss-lint.yml

        # Replace all relative paths in the XML report with absolute paths,
        # since jenkins needs absolute paths for displaying errors:
        curr_dir=$(pwd)
        sed -i "s@<file name='@<file name='${curr_dir}/@g" reports/csslint.report
    else
        echo -e "\nNo scss-lint violations."
    fi

    echo -e "\nPlease fix all errors before doing git review!"
fi

popd > /dev/null
exit $success

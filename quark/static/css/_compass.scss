// _compass.scss - includes mixins from Compass for general css3 shortening

// Compass Mixins

// Copied from _support.scss
// Support for mozilla in experimental css3 properties (-moz).
$experimental-support-for-mozilla      : true !default;
// Support for webkit in experimental css3 properties (-webkit).
$experimental-support-for-webkit       : true !default;
// Support for opera in experimental css3 properties (-o).
$experimental-support-for-opera        : true !default;
// Support for microsoft in experimental css3 properties (-ms).
$experimental-support-for-microsoft    : true !default;
// Support for khtml in experimental css3 properties (-khtml).
$experimental-support-for-khtml        : false !default;

// Copied from _shared.scss
@mixin experimental($property, $value,
  $moz      : $experimental-support-for-mozilla,
  $webkit   : $experimental-support-for-webkit,
  $o        : $experimental-support-for-opera,
  $ms       : $experimental-support-for-microsoft,
  $khtml    : $experimental-support-for-khtml,
  $official : true
) {
  @if $webkit  and $experimental-support-for-webkit
    { -webkit-#{$property} : $value; }
  @if $khtml   and $experimental-support-for-khtml
    {  -khtml-#{$property} : $value; }
  @if $moz     and $experimental-support-for-mozilla
    {    -moz-#{$property} : $value; }
  @if $ms      and $experimental-support-for-microsoft
    {     -ms-#{$property} : $value; }
  @if $o       and $experimental-support-for-opera
    {      -o-#{$property} : $value; }
  @if $official
    {         #{$property} : $value; }
}

// Copied from _border-radius.scss
$default-border-radius: 5px !default;

// Round all corners by a specific amount,
// defaults to value of `$default-border-radius`.
@mixin border-radius($radius: $default-border-radius, $vertical-radius: false) {
  @if $vertical-radius {
    // Webkit doesn't understand the official shorthand syntax for specifying
    // a vertical radius unless so in case there's several we only take the
    // first.
    @include experimental(border-radius,
      first-value-of($radius) first-value-of($vertical-radius),
      not -moz,
      -webkit,
      not -o,
      not -ms,
      not -khtml,
      not official
    );
    @include experimental("border-radius",
      $radius unquote("/") $vertical-radius,
      -moz,
      not -webkit,
      not -o,
      not -ms,
      -khtml,
      official
    );
  }
  @else {
    @include experimental(border-radius, $radius);
  }
}

// Round radius at position by amount.
// * legal values for `$vert`: `top`, `bottom`
// * legal values for `$horz`: `left`, `right`
@mixin border-corner-radius($vert, $horz, $radius: $default-border-radius) {
  // Support for mozilla's syntax for specifying a corner
  @include experimental("border-radius-#{$vert}#{$horz}", $radius,
    -moz,
    not -webkit,
    not -o,
    not -ms,
    not -khtml,
    not official
  );
  @include experimental("border-#{$vert}-#{$horz}-radius", $radius,
    not -moz,
    -webkit,
    not -o,
    not -ms,
    -khtml,
    official
  );
}

// Round top-left corner only
@mixin border-top-left-radius($radius: $default-border-radius) {
  @include border-corner-radius(top, left, $radius); }

// Round top-right corner only
@mixin border-top-right-radius($radius: $default-border-radius) {
  @include border-corner-radius(top, right, $radius); }

// Round bottom-left corner only
@mixin border-bottom-left-radius($radius: $default-border-radius) {
  @include border-corner-radius(bottom, left, $radius); }

// Round bottom-right corner only
@mixin border-bottom-right-radius($radius: $default-border-radius) {
  @include border-corner-radius(bottom, right, $radius); }

// Round both top corners by amount
@mixin border-top-radius($radius: $default-border-radius) {
  @include border-top-left-radius($radius);
  @include border-top-right-radius($radius); }

// Round both right corners by amount
@mixin border-right-radius($radius: $default-border-radius) {
  @include border-top-right-radius($radius);
  @include border-bottom-right-radius($radius); }

// Round both bottom corners by amount
@mixin border-bottom-radius($radius: $default-border-radius) {
  @include border-bottom-left-radius($radius);
  @include border-bottom-right-radius($radius); }

// Round both left corners by amount
@mixin border-left-radius($radius: $default-border-radius) {
  @include border-top-left-radius($radius);
  @include border-bottom-left-radius($radius); }

// Copied from _box-shadow.scss
// The default color for box shadows
$default-box-shadow-color: #333333 !default;
// The default horizontal offset. Positive is to the right.
$default-box-shadow-h-offset: 0px !default;
// The default vertical offset. Positive is down.
$default-box-shadow-v-offset: 0px !default;
// The default blur length.
$default-box-shadow-blur: 5px !default;
// The default spread length.
$default-box-shadow-spread : false !default;
// The default shadow inset: inset or false (for standard shadow).
$default-box-shadow-inset : false !default;

// Provides cross-browser for Webkit, Gecko, and CSS3 box shadows when one or
// more box shadows are needed.
// Each shadow argument should adhere to the standard css3 syntax for the
// box-shadow property.
@mixin box-shadow(
  $shadow-1 : default,
  $shadow-2 : false,
  $shadow-3 : false,
  $shadow-4 : false,
  $shadow-5 : false,
  $shadow-6 : false,
  $shadow-7 : false,
  $shadow-8 : false,
  $shadow-9 : false,
  $shadow-10: false
) {
  @if $shadow-1 == default {
    $shadow-1 : -compass-space-list(compact((if($default-box-shadow-inset,
      inset, false), $default-box-shadow-h-offset, $default-box-shadow-v-offset,
      $default-box-shadow-blur, $default-box-shadow-spread,
      $default-box-shadow-color)));
  }
  $shadow : compact(($shadow-1, $shadow-2, $shadow-3, $shadow-4, $shadow-5,
    $shadow-6, $shadow-7, $shadow-8, $shadow-9, $shadow-10));
  @include experimental(box-shadow, $shadow,
    -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// Copied from https://groups.google.com/forum/#!topic/sass-lang/nF6Ux3aGJ1I
// compact is not pure sass, but is in compass, thus we need this to fill it in
// it does not work with nested lists, but functions for our purposes
@function compact($list) {
  $new-list: ();
  @each $element in $list {
    @if $element {
      $new-list: append($new-list, $element);
    }
  }
  @return $new-list;
}